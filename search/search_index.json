{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welkom bij de cursus Microcontrollers","text":"<p>Deze website helpt je om microcontrollers te leren programmeren met Arduino (C++) en MicroPython. Kies een hoofdstuk in de inhoudstabel om te starten!</p> <p></p>"},{"location":"analoog_pwm/","title":"Analoge signalen en PWM","text":""},{"location":"analoog_pwm/#adc-analog-to-digital-converter","title":"ADC (Analog-to-Digital Converter)","text":"<p>Sommige pinnen kunnen een spanning meten (0\u20133.3 V).</p> <pre><code>// Arduino (C++) voorbeeld\nint potPin = A0;\nint waarde;\nvoid setup() {\n  Serial.begin(9600);\n}\nvoid loop() {\n  waarde = analogRead(potPin); // 0\u20131023\n  Serial.println(waarde);\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import ADC, Pin\npot = ADC(Pin(26))\nwaarde = pot.read_u16() # 0\u201365535\nprint(waarde)\n</code></pre>"},{"location":"analoog_pwm/#pwm-pulse-width-modulation","title":"PWM (Pulse Width Modulation)","text":"<p>LED dimmen door het signaal snel aan/uit te schakelen.</p> <pre><code>// Arduino (C++) voorbeeld\nint ledPin = 9;\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  analogWrite(ledPin, 128); // halve helderheid\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import PWM, Pin\nled = PWM(Pin(25))\nled.duty_u16(32768) # halve helderheid\n</code></pre> <p></p>"},{"location":"componenten/","title":"Elektronische componenten","text":"<p>Hier vind je uitleg over de belangrijkste basiscomponenten die je tegenkomt bij microcontrollers.</p>"},{"location":"componenten/#dc-spanningsbron","title":"DC Spanningsbron","text":"<p>Symbool: </p> <p>De spanningsbron is de voeding voor je microcontroller. Dit kan een batterij zijn, een adapter of de USB-poort van je computer.</p>"},{"location":"componenten/#weerstand","title":"Weerstand","text":"<p>Symbool: </p> <p>Een weerstand beperkt de stroom in een circuit. Dit hebben we bijvoorbeeld nodig bij het aansluiten van een LED!</p>"},{"location":"componenten/#zekering-fuse","title":"Zekering (Fuse)","text":"<p>Symbool: </p> <p>Een zekering beschermt tegen te hoge stroom. Wanneer de stroom te groot wordt, zal de zekering gecontrolleerd doorbranden. Let op: een zekering is geen weerstand, vele leerlingen teken een weerstand met het symbool van een zekering maar dat is helemaal verkeerd!</p>"},{"location":"componenten/#diode","title":"Diode","text":"<p>Symbool: </p> <p>Een diode laat stroom maar in \u00e9\u00e9n richting door. Zoals het in dit symbool staat, kan de stroom van boven naar onder stromen maar niet omgekeerd.</p>"},{"location":"componenten/#led-light-emitting-diode","title":"LED (Light Emitting Diode)","text":"<p>Symbool: </p> <p>Een LED is een speciale diode, ze geeft licht als er voldoende stroom doorheen gaat. Gebruik altijd een serieweerstand om ervoor te zorgen dat er niet te veel stroom doorheen vloeit! Dan kan de LED of de uitgang van de microcontroller immers kapot gaan.</p>"},{"location":"componenten/#schakelaar-spdt","title":"Schakelaar (SPDT))","text":"<ul> <li>Foto: </li> <li>Symbool: </li> </ul> <p>Met een SPDT (Single Pole Dual Throw) schakelaar of tuimelschakelaar, kun je kiezen of hoe \"middelste\" contact verbonden wordt. In het model op de foto, kan je zorgen dat het met geen van beiden contact maakt maar dit kan meestal niet. Het is ofwel het ene, ofwel het andere en daar zit slechts een zeer korte \"dode tijd\" tussen. Dit komt later terug bij GPIO output.</p>"},{"location":"datatypes/","title":"Meer datatypes","text":""},{"location":"datatypes/#unsigned-integer","title":"Unsigned integer","text":"<p>Een teller die het aantal keer dat je op een knop drukt bijhoudt.</p> <pre><code>// Arduino (C++) voorbeeld\nunsigned int teller = 0;\nint buttonPin = 2;\nvoid setup() {\n  pinMode(buttonPin, INPUT);\n}\nvoid loop() {\n  if (digitalRead(buttonPin) == HIGH) {\n    teller++;\n    delay(200); // debounce\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nbutton = Pin(14, Pin.IN)\nteller = 0\nwhile True:\n    if button.value():\n        teller += 1\n        time.sleep(0.2) # debounce\n</code></pre>"},{"location":"datatypes/#signed-integer","title":"Signed integer","text":"<p>Negatieve getallen zijn handig, bijvoorbeeld bij temperatuurmetingen.</p> <p>Bijvoorbeeld: temperatuur = -5 \u00b0C</p> <p></p>"},{"location":"gpio_input/","title":"GPIO Input \u2013 dingen meten","text":"<p>GPIO als ingang: hiermee kun je bijvoorbeeld een knop uitlezen.</p>"},{"location":"gpio_input/#knop-indrukken","title":"Knop indrukken","text":"<pre><code>// Arduino (C++) voorbeeld\nint buttonPin = 2;\nint ledPin = 13;\nvoid setup() {\n  pinMode(buttonPin, INPUT);\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  if (digitalRead(buttonPin) == HIGH) {\n    digitalWrite(ledPin, HIGH); // LED aan\n  } else {\n    digitalWrite(ledPin, LOW);  // LED uit\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nbutton = Pin(14, Pin.IN)\nled = Pin(25, Pin.OUT)\nwhile True:\n    if button.value():\n        led.value(1)\n    else:\n        led.value(0)\n</code></pre> <p>Debouncing: Soms \"stuitert\" een knop, daar kun je later meer over leren.</p> <p></p>"},{"location":"gpio_output/","title":"GPIO Output \u2013 dingen besturen","text":"<p>GPIO als uitgang: hiermee kun je bijvoorbeeld een LED aan of uit zetten.</p>"},{"location":"gpio_output/#led-schakelen","title":"LED schakelen","text":"<pre><code>// Arduino (C++) voorbeeld\nint ledPin = 13;\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  digitalWrite(ledPin, HIGH); // LED aan\n  delay(1000);\n  digitalWrite(ledPin, LOW);  // LED uit\n  delay(1000);\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nimport time\nled = Pin(25, Pin.OUT)\nwhile True:\n    led.value(1)  # LED aan\n    time.sleep(1)\n    led.value(0)  # LED uit\n    time.sleep(1)\n</code></pre> <p>Let op: HIGH (1) / LOW (0) betekent aan/uit (Boolean).</p> <p>Boolean variabelen: - C++: <code>true</code> / <code>false</code> - Python: <code>True</code> / <code>False</code></p> <p></p>"},{"location":"inhoud/","title":"Inhoudstabel","text":"<ol> <li>Introductie</li> <li>GPIO Output \u2013 dingen besturen</li> <li>GPIO Input \u2013 dingen meten</li> <li>Meer datatypes</li> <li>Analoge signalen en PWM</li> <li>Samenspel en toepassingen</li> <li>Vooruitblik</li> </ol>"},{"location":"introductie/","title":"Introductie","text":""},{"location":"introductie/#hoofdstuk-1-wat-is-een-microcontroller","title":"Hoofdstuk 1 \u2013 Wat is een microcontroller?","text":""},{"location":"introductie/#11-wat-is-een-microcontroller","title":"1.1 Wat is een microcontroller?","text":"<p>Een microcontroller is een kleine computer op een chip. Hij kan drie dingen:</p> <ul> <li>Meten (via ingangen of sensoren)</li> <li>Denken (programma uitvoeren)</li> <li>Sturen (via uitgangen, bijvoorbeeld een LED of motor aanzetten)</li> </ul> <p>Voorbeelden:</p> <ul> <li>Raspberry Pi Pico</li> <li>Arduino Uno</li> </ul> <p></p>"},{"location":"introductie/#12-verschil-met-een-computer","title":"1.2 Verschil met een computer","text":"<p>Een laptop kan veel dingen tegelijk doen (internet, filmpjes, spelletjes). Een microcontroller doet meestal \u00e9\u00e9n taak, maar kan dat heel betrouwbaar en snel. Bijvoorbeeld: een wasmachine besturen, lampen automatisch schakelen of een robot laten bewegen.</p>"},{"location":"introductie/#13-veilig-werken-met-elektronica","title":"1.3 Veilig werken met elektronica","text":"<p>Microcontrollers werken meestal op 3.3V of 5V \u2192 veilig voor mensen.</p> <p>Maar: sluit nooit rechtstreeks een grote motor of lamp aan.</p> <p>Altijd eerst een weerstand gebruiken bij een LED, anders gaat hij kapot.</p> <p></p>"},{"location":"toepassingen/","title":"Samenspel en toepassingen","text":""},{"location":"toepassingen/#input-output-combineren","title":"Input + Output combineren","text":"<p>Dimmen van een LED met een potmeter, of een knop die de toonhoogte van een buzzer verandert.</p>"},{"location":"toepassingen/#mini-verkeerslicht","title":"Mini verkeerslicht","text":"<pre><code>// Arduino (C++) voorbeeld\nint ledR = 10, ledG = 11, ledY = 12, button = 2;\nvoid setup() {\n  pinMode(ledR, OUTPUT);\n  pinMode(ledG, OUTPUT);\n  pinMode(ledY, OUTPUT);\n  pinMode(button, INPUT);\n}\nvoid loop() {\n  if (digitalRead(button) == HIGH) {\n    digitalWrite(ledR, HIGH);\n    delay(1000);\n    digitalWrite(ledR, LOW);\n    digitalWrite(ledG, HIGH);\n    delay(1000);\n    digitalWrite(ledG, LOW);\n    digitalWrite(ledY, HIGH);\n    delay(500);\n    digitalWrite(ledY, LOW);\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nimport time\nledR = Pin(15, Pin.OUT)\nledG = Pin(14, Pin.OUT)\nledY = Pin(13, Pin.OUT)\nbutton = Pin(12, Pin.IN)\nwhile True:\n    if button.value():\n        ledR.value(1)\n        time.sleep(1)\n        ledR.value(0)\n        ledG.value(1)\n        time.sleep(1)\n        ledG.value(0)\n        ledY.value(1)\n        time.sleep(0.5)\n        ledY.value(0)\n</code></pre> <p>Projectidee\u00ebn: - Reaction game met knop en LED - Toonhoogte veranderen met knop en buzzer</p> <p></p>"},{"location":"vooruitblik/","title":"Vooruitblik","text":""},{"location":"vooruitblik/#andere-datatypes","title":"Andere datatypes","text":"<ul> <li>float (kommagetallen)</li> <li>string (tekst)</li> </ul>"},{"location":"vooruitblik/#serial-communicatie","title":"Serial communicatie","text":"<p>Met de computer praten via de seri\u00eble poort.</p> <pre><code>// Arduino (C++) voorbeeld\nSerial.println(\"Hallo!\");\n</code></pre> <pre><code># MicroPython voorbeeld\nprint(\"Hallo!\")\n</code></pre> <p>Later kun je uitbreiden met sensoren, displays en motoren!</p> <p></p>"}]}