{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welkom bij de cursus Microcontrollers","text":"<p>Deze website helpt je om microcontrollers te leren kennen, gebruiken en programmeren. In deze cursus bekijken we hoe dat kan met Arduino (C++) en met MicroPython. Kies een hoofdstuk in de inhoudstabel om te starten!</p> <p></p>"},{"location":"analoog_pwm/","title":"Analoge signalen en PWM","text":""},{"location":"analoog_pwm/#adc-analog-to-digital-converter","title":"ADC (Analog-to-Digital Converter)","text":"<p>Sommige pinnen kunnen een spanning meten (0\u20133.3 V).</p> <pre><code>// Arduino (C++) voorbeeld\nint potPin = A0;\nint waarde;\nvoid setup() {\n  Serial.begin(9600);\n}\nvoid loop() {\n  waarde = analogRead(potPin); // 0\u20131023\n  Serial.println(waarde);\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import ADC, Pin\npot = ADC(Pin(26))\nwaarde = pot.read_u16() # 0\u201365535\nprint(waarde)\n</code></pre>"},{"location":"analoog_pwm/#pwm-pulse-width-modulation","title":"PWM (Pulse Width Modulation)","text":"<p>LED dimmen door het signaal snel aan/uit te schakelen.</p> <pre><code>// Arduino (C++) voorbeeld\nint ledPin = 9;\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  analogWrite(ledPin, 128); // halve helderheid\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import PWM, Pin\nled = PWM(Pin(25))\nled.duty_u16(32768) # halve helderheid\n</code></pre> <p></p>"},{"location":"componenten/","title":"Elektronische componenten","text":"<p>Hier vind je uitleg over de belangrijkste basiscomponenten die we nodig hebben bij het gebruik van microcontrollers of om de werking te beschrijven.</p>"},{"location":"componenten/#dc-spanningsbron","title":"DC Spanningsbron","text":"<p>Symbool: </p> <p>De spanningsbron is de voeding voor je microcontroller. Dit kan een batterij zijn, een adapter of de USB-poort van je computer.</p>"},{"location":"componenten/#diode","title":"Diode","text":"<p>Symbool: </p> <p>Een diode laat stroom maar in \u00e9\u00e9n richting door. Zoals het in dit symbool staat, kan de stroom van boven naar onder stromen maar niet omgekeerd.</p>"},{"location":"componenten/#led-light-emitting-diode","title":"LED (Light Emitting Diode)","text":"<p>Symbool: </p> <p>Een LED is een speciale diode, ze geeft licht als er voldoende stroom doorheen gaat. Gebruik altijd een serieweerstand om ervoor te zorgen dat er niet te veel stroom doorheen vloeit! Dan kan de LED of de uitgang van de microcontroller immers kapot gaan.</p>"},{"location":"componenten/#weerstand","title":"Weerstand","text":"<p>Symbool: </p> <p>Een weerstand beperkt de stroom in een circuit. Dit hebben we bijvoorbeeld nodig bij het aansluiten van een LED!</p>"},{"location":"componenten/#zekering-fuse","title":"Zekering (Fuse)","text":"<p>Symbool: </p> <p>Een zekering beschermt tegen te hoge stroom. Wanneer de stroom te groot wordt, zal de zekering gecontrolleerd doorbranden. Let op: een zekering is geen weerstand, vele leerlingen tekenen een weerstand met het symbool van een zekering maar dat is helemaal verkeerd!</p>"},{"location":"componenten/#schakelaar-spdt","title":"Schakelaar (SPDT)","text":"<ul> <li>Afbeelding: </li> <li>Symbool: </li> </ul> <p>Met een SPDT (Single Pole Dual Throw) schakelaar of tuimelschakelaar, kan je kiezen of hoe \"middelste\" contact verbonden wordt. In het model op de foto, kan je zorgen dat het met geen van beiden contact maakt maar dit kan meestal niet. Het is ofwel verbonden met het ene, ofwel met het andere en daar zit slechts een zeer korte \"dode tijd\" tussen. Deze schakelaar komt later terug bij output.</p>"},{"location":"componenten/#microcontroller","title":"Microcontroller","text":"<p>Symbool: </p> <p>Dit is het symbool van de ATmega328-p. Deze microcontroller wordt ondermeer gebruikt op de Arduino UNO R3.</p> <p>Zoals je ziet, is het symbool eerder simpel, een rechthoek met veel aansluitingen. Dit is vaak het geval bij complexere componenten. Je zal merken dat de grond (GND of 0V) vaak onderaan staat en de voedingsspanning (VCC) in de regel bovenaan. Ook zullen inputs vaak links staan en outputs rechts. Hier komen we later nog terug, wanneer we beter weten wat in- en outputs zijn. De signaal namen staan in de rechthoek terwijl de pin nummers buiten de rechthoek, naast de pinnen genoteerd staan.</p> <p>## Microcontroller bord</p> <p>Symbool: </p> <p>Dit is het symbool van het microcontroller bord Arduino UNO R3. Zoals je kan zien, lijkt het heel erg op een symbool van de microcontroller maar het is niet helemaal hetzelfde. Een microcontroller is een component terwijl er op een microcontroller bord meerdere componenten staan, waaronder de microcontroller zelf. Van deze extra componenten maken we abstractie (we tekenen ze niet). Enkel de pinnen waarmee we het bord verbinden, worden in het symbool getekend.</p> <p>## Schema's</p> <p>We gebruiken deze symbolen om schema's te tekenen, zodat we duidelijk kunnen maken hoe de componenten aangesloten worden. Je vind heel veel informatie over microcontroller borden zoals de Arduino. Soms vind je een tekening zoals hieronder die duidelijk maken hoe een Arduino aan een ander bord of component aangesloten moet worden.</p> <p>Tekening:  Deze tekening komt van de instructables.com website (https://www.instructables.com/How-to-Use-the-Adafruit-BMP280-Sensor-Arduino-Tuto/) en toont hoe een BMP280 module die temperatuur en luchtdruk kan meten, via een breadbord aangesloten wordt aan een Arduino R3. Deze tekening geeft ook een beschrijving van de aansluitingen maar het is geen schema. De verschillende onderdelen worden grafisch voorgesteld en niet in een symbool. Dit werkt voor kleine, gemakkelijke schakelingen maar het werkt niet zo goed voor grotere of complexere circuits. Als we hetzelfde circuit schematisch willen voorstellen, kan het er bijvoord zo uit zien:  Schema: </p>"},{"location":"datatypes/","title":"Meer datatypes","text":""},{"location":"datatypes/#unsigned-integer","title":"Unsigned integer","text":"<p>Een teller die het aantal keer dat je op een knop drukt bijhoudt.</p> <pre><code>// Arduino (C++) voorbeeld\nunsigned int teller = 0;\nint buttonPin = 2;\nvoid setup() {\n  pinMode(buttonPin, INPUT);\n}\nvoid loop() {\n  if (digitalRead(buttonPin) == HIGH) {\n    teller++;\n    delay(200); // debounce\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nbutton = Pin(14, Pin.IN)\nteller = 0\nwhile True:\n    if button.value():\n        teller += 1\n        time.sleep(0.2) # debounce\n</code></pre>"},{"location":"datatypes/#signed-integer","title":"Signed integer","text":"<p>Negatieve getallen zijn handig, bijvoorbeeld bij temperatuurmetingen.</p> <p>Bijvoorbeeld: temperatuur = -5 \u00b0C</p> <p></p>"},{"location":"gpio/","title":"GPIO \u2013 General Purpose Input/Output","text":"<p>GPIO staat voor General Purpose Input/Output. Dit zijn de pinnen op een microcontroller die je kunt gebruiken als input (iets meten) of output (iets aansturen).</p> <ul> <li>GPIO als output: bijvoorbeeld een LED aan/uit zetten.</li> <li>GPIO als input: bijvoorbeeld een knop uitlezen.</li> </ul> <p>GPIO is de brug tussen de concepten input/output en de echte hardware.</p>"},{"location":"gpio/#voorbeeld-led-aansturen-output","title":"Voorbeeld: LED aansturen (output)","text":"<pre><code>// Arduino (C++) voorbeeld\nint ledPin = 13;\nvoid setup() {\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  digitalWrite(ledPin, HIGH); // LED aan\n  delay(1000);\n  digitalWrite(ledPin, LOW);  // LED uit\n  delay(1000);\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nimport time\nled = Pin(25, Pin.OUT)\nwhile True:\n    led.value(1)  # LED aan\n    time.sleep(1)\n    led.value(0)  # LED uit\n    time.sleep(1)\n</code></pre>"},{"location":"gpio/#voorbeeld-knop-uitlezen-input","title":"Voorbeeld: Knop uitlezen (input)","text":"<pre><code>// Arduino (C++) voorbeeld\nint buttonPin = 2;\nint ledPin = 13;\nvoid setup() {\n  pinMode(buttonPin, INPUT);\n  pinMode(ledPin, OUTPUT);\n}\nvoid loop() {\n  if (digitalRead(buttonPin) == HIGH) {\n    digitalWrite(ledPin, HIGH); // LED aan\n  } else {\n    digitalWrite(ledPin, LOW);  // LED uit\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nbutton = Pin(14, Pin.IN)\nled = Pin(25, Pin.OUT)\nwhile True:\n    if button.value():\n        led.value(1)\n    else:\n        led.value(0)\n</code></pre> <p>Meer weten? Bekijk de pagina's over input en output voor de concepten achter deze voorbeelden.</p>"},{"location":"inhoud/","title":"Inhoudstabel","text":"<ol> <li>Introductie</li> <li>Componenten</li> <li>Output \u2013 dingen aansturen</li> <li>Input \u2013 dingen meten</li> <li>GPIO \u2013 Input/Output in de praktijk</li> <li>Meer datatypes</li> <li>Analoge signalen en PWM</li> <li>Samenspel en toepassingen</li> <li>Vooruitblik</li> </ol>"},{"location":"input/","title":"Input \u2013 Dingen meten","text":"<p>Input betekent dat de microcontroller informatie ontvangt uit de buitenwereld. Dit kan bijvoorbeeld een knop, een sensor of een schakelaar zijn.</p> <ul> <li>Je meet of leest een waarde van buitenaf.</li> <li>Voorbeelden: knop indrukken, temperatuur meten, lichtsterkte meten.</li> </ul> <p>In de praktijk gebeurt input vaak via een GPIO-pin, maar het concept input is breder dan alleen GPIO.</p> <p>Lees verder op de pagina 'GPIO' hoe je dit met een microcontroller doet.</p>"},{"location":"introductie/","title":"Introductie","text":""},{"location":"introductie/#hoofdstuk-1-wat-is-een-microcontroller","title":"Hoofdstuk 1 \u2013 Wat is een microcontroller?","text":""},{"location":"introductie/#11-wat-is-een-microcontroller","title":"1.1 Wat is een microcontroller?","text":"<p>Een microcontroller is een kleine computer op een chip. Hij kan drie dingen:</p> <ul> <li>Meten (via ingangen of sensoren)</li> <li>Denken (programma uitvoeren)</li> <li>Sturen (via uitgangen, bijvoorbeeld een LED of motor aanzetten)</li> </ul> <p>Voorbeelden:</p> <ul> <li>Raspberry Pi Pico</li> <li>Arduino Uno</li> </ul> <p></p>"},{"location":"introductie/#12-verschil-met-een-computer","title":"1.2 Verschil met een computer","text":"<p>Een laptop kan veel dingen tegelijk doen (internet, filmpjes, spelletjes). Een microcontroller doet meestal \u00e9\u00e9n taak, maar kan dat heel betrouwbaar en snel. Bijvoorbeeld: een wasmachine besturen, lampen automatisch schakelen of een robot laten bewegen.</p>"},{"location":"introductie/#13-veilig-werken-met-elektronica","title":"1.3 Veilig werken met elektronica","text":"<p>Microcontrollers werken meestal op 3.3V of 5V. Spanningen tot en met 24V zijn veilig voor mensen.</p> <p>Dit wil niet zeggen dat mensen veilig zijn voor microcontrollers. Het vermogen dat een microcontroller bord kan leveren is beperkt. Sluit nooit rechtstreeks een grote motor of lamp aan. Dit kan leiden tot te hoge stromen waardoor de microcontroller of het bord kapot kan gaan.</p> <p>Zoals in het hoofdstuk over componenten al vermeld werd: altijd een weerstand in serie zetten met een LED, anders kan er iets kapot gaan.</p> <p></p>"},{"location":"output/","title":"Output \u2013 Dingen aansturen","text":"<p>Output betekent dat de microcontroller iets aanstuurt of laat gebeuren. Dit kan bijvoorbeeld een LED, een motor, een buzzer of een display zijn.</p> <ul> <li>Je stuurt een signaal naar buiten.</li> <li>Voorbeelden: lamp aan/uit, geluid maken, tekst tonen.</li> </ul> <p>In de praktijk gebeurt output vaak via een GPIO-pin, maar het concept output is breder dan alleen GPIO.</p> <p>Lees verder op de pagina 'GPIO' hoe je dit met een microcontroller doet.</p>"},{"location":"toepassingen/","title":"Samenspel en toepassingen","text":""},{"location":"toepassingen/#input-output-combineren","title":"Input + Output combineren","text":"<p>Dimmen van een LED met een potmeter, of een knop die de toonhoogte van een buzzer verandert.</p>"},{"location":"toepassingen/#mini-verkeerslicht","title":"Mini verkeerslicht","text":"<pre><code>// Arduino (C++) voorbeeld\nint ledR = 10, ledG = 11, ledY = 12, button = 2;\nvoid setup() {\n  pinMode(ledR, OUTPUT);\n  pinMode(ledG, OUTPUT);\n  pinMode(ledY, OUTPUT);\n  pinMode(button, INPUT);\n}\nvoid loop() {\n  if (digitalRead(button) == HIGH) {\n    digitalWrite(ledR, HIGH);\n    delay(1000);\n    digitalWrite(ledR, LOW);\n    digitalWrite(ledG, HIGH);\n    delay(1000);\n    digitalWrite(ledG, LOW);\n    digitalWrite(ledY, HIGH);\n    delay(500);\n    digitalWrite(ledY, LOW);\n  }\n}\n</code></pre> <pre><code># MicroPython voorbeeld\nfrom machine import Pin\nimport time\nledR = Pin(15, Pin.OUT)\nledG = Pin(14, Pin.OUT)\nledY = Pin(13, Pin.OUT)\nbutton = Pin(12, Pin.IN)\nwhile True:\n    if button.value():\n        ledR.value(1)\n        time.sleep(1)\n        ledR.value(0)\n        ledG.value(1)\n        time.sleep(1)\n        ledG.value(0)\n        ledY.value(1)\n        time.sleep(0.5)\n        ledY.value(0)\n</code></pre> <p>Projectidee\u00ebn: - Reaction game met knop en LED - Toonhoogte veranderen met knop en buzzer</p> <p></p>"},{"location":"vooruitblik/","title":"Vooruitblik","text":""},{"location":"vooruitblik/#andere-datatypes","title":"Andere datatypes","text":"<ul> <li>float (kommagetallen)</li> <li>string (tekst)</li> </ul>"},{"location":"vooruitblik/#serial-communicatie","title":"Serial communicatie","text":"<p>Met de computer praten via de seri\u00eble poort.</p> <pre><code>// Arduino (C++) voorbeeld\nSerial.println(\"Hallo!\");\n</code></pre> <pre><code># MicroPython voorbeeld\nprint(\"Hallo!\")\n</code></pre> <p>Later kun je uitbreiden met sensoren, displays en motoren!</p> <p></p>"}]}